---
- hosts: all
  connection: local
  gather_facts: false
  vars:
    # override on command line if needed
    target_hostname: "{{ inventory_hostname }}"
    target_username: "{{ username | default('admin') }}"
    target_password: "{{ password }}"
    platform_type: "{{ device_type | default('ucs') }}"
    target_proxy_host: "{{ proxy_host | default('') }}"
    target_proxy_port: "{{ proxy_port | default(0) }}"
    target_read_only: "{{ read_only | default(false) }}"
    target_resource_groups: "{{ resource_groups | default('default') }}"
    target_reset_dc: "{{ reset_dc | default(false) }}"
  environment:
    PYTHONPATH: "{{ playbook_dir }}"
  tasks:
    - name: Set initial password if default_password is defined
      ansible.builtin.uri:
        url: "https://{{ target_hostname }}/redfish/v1/AccountService/Accounts/1"
        method: PATCH
        user: "{{ target_username }}"
        password: "{{ default_password }}"
        body: '{"Password": "{{ target_password }}"}'
        body_format: json
        validate_certs: false
        force_basic_auth: true
      when: default_password is defined and default_password != ''
      delegate_to: localhost
      ignore_errors: true
    - name: Define JSON string passed to claim script
      set_fact:
        # JSON for each host being claimed.
        # Quotes and whitespace are importantant for the JSON string passed to claim script.
        # ----------
        stash_json: ' { "hostname": "{{ target_hostname }}",
          "username": "{{ target_username }}",
          "password": "{{ target_password }}",
          "device_type": "{{ platform_type }}",
          "proxy_host": "{{ target_proxy_host }}",
          "proxy_port": "{{ target_proxy_port }}",
          "read_only": "{{ target_read_only }}",
          "resource_groups": ["{{ target_resource_groups }}"],
          "reset_dc": "{{ target_reset_dc }}"
          }'
    - name: Claim targets
      script: /usr/bin/env python claim_target.py -t ' [{{ stash_json }}]'
      register: result
      changed_when: '"true" in result.stdout'
      failed_when: result.rc != 0
